<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A///wAP//8AD///AA///wAP//8AD//////8=
</value>
  </data>
</root>